用python写一个微信
    https://blog.csdn.net/weixin_41048363/article/details/79375519

cmd和windows powershell的区别
    https://blog.csdn.net/u012110719/article/details/41413995

2018.11.10  任务:  弄懂装饰器  闭包

http://www.w3school.com.cn/h.asp
HTML 系列教程
从左侧的菜单选择你需要的教程！

VSCODE 快捷
    主命令框
    F1 或 Ctrl+Shift+P: 打开命令面板。在打开的输入框内，可以输入任何命令，例如：

    按一下 Backspace 会进入到 Ctrl+P 模式
    在 Ctrl+P 下输入 > 可以进入 Ctrl+Shift+P 模式
    在 Ctrl+P 窗口下还可以:

    直接输入文件名，跳转到文件
    ? 列出当前可执行的动作
    ! 显示 Errors或 Warnings，也可以 Ctrl+Shift+M
    : 跳转到行数，也可以 Ctrl+G 直接进入
    @ 跳转到 symbol（搜索变量或者函数），也可以 Ctrl+Shift+O 直接进入
    @ 根据分类跳转 symbol，查找属性或函数，也可以 Ctrl+Shift+O 后输入:进入
    # 根据名字查找 symbol，也可以 Ctrl+T
    常用快捷键
    编辑器与窗口管理

    打开一个新窗口： Ctrl+Shift+N
    关闭窗口： Ctrl+Shift+W
    同时打开多个编辑器（查看多个文件）
    新建文件 Ctrl+N
    文件之间切换 Ctrl+Tab
    切出一个新的编辑器（最多 3 个） Ctrl+\，也可以按住 Ctrl 鼠标点击 Explorer 里的文件名
    左中右 3 个编辑器的快捷键 Ctrl+1 Ctrl+2 Ctrl+3
    3 个编辑器之间循环切换 Ctrl+
    编辑器换位置， Ctrl+k然后按 Left或 Right
    代码编辑

    格式调整

    代码行缩进 Ctrl+[ 、 Ctrl+]
    Ctrl+C 、 Ctrl+V 复制或剪切当前行/当前选中内容
    代码格式化： Shift+Alt+F，或 Ctrl+Shift+P 后输入 format code
    上下移动一行： Alt+Up 或 Alt+Down
    向上向下复制一行： Shift+Alt+Up 或 Shift+Alt+Down
    在当前行下边插入一行 Ctrl+Enter
    在当前行上方插入一行 Ctrl+Shift+Enter
    光标相关

    移动到行首： Home
    移动到行尾： End
    移动到文件结尾： Ctrl+End
    移动到文件开头： Ctrl+Home
    移动到定义处： F12
    定义处缩略图：只看一眼而不跳转过去 Alt+F12
    移动到后半个括号： Ctrl+Shift+]
    选择从光标到行尾： Shift+End
    选择从行首到光标处： Shift+Home
    删除光标右侧的所有字： Ctrl+Delete
    扩展/缩小选取范围： Shift+Alt+Left 和 Shift+Alt+Right
    多行编辑(列编辑)：Alt+Shift+鼠标左键，Ctrl+Alt+Down/Up
    同时选中所有匹配： Ctrl+Shift+L
    Ctrl+D 下一个匹配的也被选中 (在 sublime 中是删除当前行，后面自定义快键键中，设置与 Ctrl+Shift+K 互换了)
    回退上一个光标操作： Ctrl+U
    重构代码

    找到所有的引用： Shift+F12
    同时修改本文件中所有匹配的： Ctrl+F12
    重命名：比如要修改一个方法名，可以选中后按 F2，输入新的名字，回车，会发现所有的文件都修改了
    跳转到下一个 Error 或 Warning：当有多个错误时可以按 F8 逐个跳转
    查看 diff： 在 explorer 里选择文件右键 Set file to compare，然后需要对比的文件上右键选择 Compare with file_name_you_chose
    查找替换

    查找 Ctrl+F
    查找替换 Ctrl+H
    整个文件夹中查找 Ctrl+Shift+F
    显示相关

    全屏：F11
    zoomIn/zoomOut：Ctrl +/-
    侧边栏显/隐：Ctrl+B
    显示资源管理器 Ctrl+Shift+E
    显示搜索 Ctrl+Shift+F
    显示 Git Ctrl+Shift+G
    显示 Debug Ctrl+Shift+D
    显示 Output Ctrl+Shift+U
    其他
    自动保存：File -> AutoSave ，或者 Ctrl+Shift+P，输入 auto
    修改默认快捷键
    打开默认键盘快捷方式设置：
    File -> Preferences -> Keyboard Shortcuts，或者：Alt+F -> p -> k

    修改 keybindings.json：

    // Place your key bindings in this file to overwrite the defaults
    [
        // ctrl+space 被切换输入法快捷键占用
        {
            "key": "ctrl+alt+space",
            "command": "editor.action.triggerSuggest",
            "when": "editorTextFocus"
        },
        // ctrl+d 删除一行
        {
            "key": "ctrl+d",
            "command": "editor.action.deleteLines",
            "when": "editorTextFocus"
        },
        // 与删除一行的快捷键互换
        {
            "key": "ctrl+shift+k",
            "command": "editor.action.addSelectionToNextFindMatch",
            "when": "editorFocus"
        },
        // ctrl+shift+/多行注释
        {
            "key":"ctrl+shift+/",
            "command": "editor.action.blockComment",
            "when": "editorTextFocus"
        },
        // 定制与 sublime 相同的大小写转换快捷键，需安装 TextTransform 插件
        {
            "key": "ctrl+k ctrl+u",
            "command": "uppercase",
            "when": "editorTextFocus"
        },
        {
            "key": "ctrl+k ctrl+l",
            "command": "lowercase",
            "when": "editorTextFocus"
        }
    ]
    前端开发必备插件
    PostCSS Sorting
    stylelint
    stylefmt
    ESLint
    javascript standard format
    beautify
    Babel ES6/ES7
    Debugger for Chrome
    Add jsdoc comments
    javascript(ES6) code snippets
    vue
    weex
    Reactjs code snippets
    React Native Tools
    Npm Intellisense
    Instant Markdown
    Markdown Shortcuts
    TextTransform
    自定义设置参考
    vscode 自定义配置参考：

    {
        "editor.fontSize": 18,
        "files.associations": {
            "*.es": "javascript",
            "*.es6": "javascript"
        },
        // 控制编辑器是否应呈现空白字符
        "editor.renderWhitespace": true,
        // 启用后，将在保存文件时剪裁尾随空格。
        "files.trimTrailingWhitespace": true,
        // File extensions that can be beautified as javascript or JSON.
        "beautify.JSfiles": [
            "",
            "es",
            "es6",
            "js",
            "json",
            "jsbeautifyrc",
            "jshintrc"
        ]
    }


 内置方法	 说明
 __init__(self,...)	 初始化对象，在创建新对象时调用
 __del__(self)	 释放对象，在对象被删除之前调用
 __new__(cls,*args,**kwd)	 实例的生成操作
 __str__(self)	 在使用print语句时被调用
 __getitem__(self,key)	 获取序列的索引key对应的值，等价于seq[key]
 __len__(self)	 在调用内联函数len()时被调用
 __cmp__(stc,dst)	 比较两个对象src和dst
 __getattr__(s,name)	 获取属性的值
 __setattr__(s,name,value)	 设置属性的值
 __delattr__(s,name)	 删除name属性
 __getattribute__()	 __getattribute__()功能与__getattr__()类似
 __gt__(self,other)	 判断self对象是否大于other对象
 __lt__(slef,other)	 判断self对象是否小于other对象
 __ge__(slef,other)	 判断self对象是否大于或者等于other对象
 __le__(slef,other)	 判断self对象是否小于或者等于other对象
 __eq__(slef,other)	 判断self对象是否等于other对象
 __call__(self,*args)	 把实例对象作为函数调用

___________________________________________________________________

下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。

Workspace：工作区
Index / Stage：暂存区
Repository：仓库区（或本地仓库）
Remote：远程仓库
一、新建代码库

# 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
二、配置
Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。


# 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name "[name]"
$ git config [--global] user.email "[email address]"
三、增加/删除文件

# 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
四、代码提交

# 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
五、分支

# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
六、标签

# 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
七、查看信息

# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的代码差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat "@{0 day ago}"

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog

# 从本地master拉取代码更新当前分支：branch 一般为master
$ git rebase [branch]
八、远程同步
$ git remote update  --更新远程仓储
# 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
九、撤销

# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
十、其他

# 生成一个可供发布的压缩包
$ git archive
___________________________________________________________________

  #  生成新的ssh   ssh-keygen -t rsa -b 4096 -C "你的邮箱" 

    测试连接   输入yes   ssh -T git@github.com 

    一台电脑只需要一个 SSH key
    一个 SSH key 可以访问你的所有仓库，即使你有 1000000 个仓库，都没问题
    如果你新买了电脑，就在新电脑上重新生成一个 SSH key，把这个 key 也上传到 GitHub，它可以和之前的 key 共存在 GitHub 上
    如果你把 key 从电脑上删除了，重新生成一个 key 即可，替换之前的 key


_______________________________________________________________________
win cmd  设置环境变量 path  可以在终端任意文件访问
      高级系统设置  环境变量 path   在后边追加


*  架构
  用户  通过 url 访问  ,如果文件存在,浏览器能够解析 会显示出来.
  不能直接解析的会让下载
  文件找不到 404 错误
  浏览器请求交给谁,谁接收请求,有没有携带参数,谁响应了结果给浏览器.
  MVC 
 

 开发flask
  MYsql
  python
  Flask

视图函数分开专门写在v
++++++++====================================================================

时间有关的函数
local = time.strftime("%Y.%m.%d")
   
ftime = datetime.datetime.now().strftime('%Y%m%d%H%M%S%f')

time_stamp=str(int(time.time()))
==============================================================================

ffmpeng  音频转换  已添加环境变量
==============================================================================

数据库模型查询语句
2.查询
    1.基于 db.session 进行查询
      1. db.session.query(Models1,Models2,...)
        参数:要查询的实体类(表),如果是多个实体类的话,相当于要做多表连接查询
        返回:对应的类的一个查询对象
      2. 查询执行函数
        目的:在query()的基础上得到最终的数据
        语法:db.session.query(Models).查询执行函数()
        1.all():以列表的方式返回query对象中所有的查询数据
        2.first():返回query对象中的第一个查询结果,
          如果没有结果,返回None
        3.first_or_404():返回query对象中的第一个查询结果,
          如果没有结果的话则终止程序并响应404
        4.count():返回query对象中的查询结果的数量
      3.查询过滤器函数
        作用:专门对数据进行筛选,返回部分行数据
        1.filter()    按指定条件进行过滤(单表,多表,定值,不定值)
        2.filter_by() 按等值条件进行过滤
        3.limit()     按限制行数量获取结果
        4.order_by()  按指定列进行排序
        5.group_by()  按指定条件进行分组

        语法:
        db.sessin.query().过滤器函数().执行函数()

        过滤器函数详解:
        1.filter()
          注意:条件必须由 实体类.属性 组成
          1.查询年龄大于 30 的人的信息
            db.session.query(Users).filter(Users.age>30).all()
          2.查询id为1的人的信息
            db.session.query(Users).filter(Users.id==1).first()
            注意:filter()做等值判断时必须使用 == 
          3.查询年龄大于30并且id大于1的用户的信息
            filter(条件1,条件2,...) : and
            db.session.query(Users).filter(Users.age>30,Users.id>1).all()
          4.查询年龄大于30或者id为1的用户的信息
            查询或者操作,需要使用or_()
            filter(or_(条件1,条件2))

            from sqlalchemy import or_
            db.session.query(Users).filter(or_(Users.age>30,Users.id==1)).all()
          5.查询 email 中包含 'w' Users的信息
            db.session.query(Users).filter(Users.email.like('%w%'))
          6.查询 id 在 [2,4] 列表中的Users的信息
            db.session.query(Users).filter(Users.id.in_([2,4])).all()
        2.filter_by()
          注意:只能做等值判断,不能做不等值
          查询id为1的users的信息
          db.session.query(Users).filter_by(id=1).first()
        3.limit()
          1.获取 users 表中的前2条数据
            db.session.query(Users).limit(2).all()
            select * from users limit 2
          2.获取 users 表中过滤前3条数据后剩余的前2条数据
            select * from users limit 3,2
            db.session.query(Users).limit(2).offset(3).all()
            
        4.order_by()
          # 按照 id 倒序排序
          select * from users order by id desc;
          # 先按照年龄倒序排序,再按照id升序排序
          select * from users order by age desc,id asc;

          db.session.query(Users).order_by("age desc,id asc").all()
        5.group_by()
          1.将 users 表中的数据按照 age 进行分组
            db.session.query(Users.age).group_by('age').all()
        6.聚合函数
          1.查询users表中所有人的平均年龄
            select avg(age) from users;

            from sqlalchemy import func
            db.session.query(func.avg(Users.age).label('avgAge')).all()
          2.users表中,按年龄分组,再查每组的年龄平均值
            select age,avg(age) from users group by age

            db.session.query(func.avg(Users.age)).group_by('age').all()

          聚合函数:
            1.func.avg() : 求平均值
            2.func.sum() : 求和
            3.func.max() : 求最大值
            4.func.min() : 求最小值
            5.func.count() : 求不为空的数量
    2.基于 Models 类进行查询
      Models.query.查询过滤器函数().查询执行函数()

    # 测试 filter() 函数
    ##################
    # filter() - 查询 Users中年龄大于30的人的信息
    # users=db.session.query(Users).filter(Users.age>30).all()

    # filter() - 查询Users中id大于1并且年龄大于30的人的信息
    # users = db.session.query(Users).filter(Users.age>30,Users.id>1).all()

    #filter() - 查询Users中id为1或者年龄大于30的人的信息
    # users = db.session.query(Users).filter(or_(Users.id==1,Users.age > 30)).all()

    #filter() - 查询Users中id在[2,4]列表中的users的信息
    # users = db.session.query(Users).filter(Users.id.in_([2,4])).all()

    #filter() - 查询Users中age在 45~50之间的人的信息 - between 45 and 50
    # users=db.session.query(Users).filter(Users.age.between(45,50)).all()
    #
    # print(type(users))
    #
    # for u in users:
    #     print("ID:%d,姓名:%s,年龄:%d,邮箱:%s" % (u.id,u.username,u.age,u.email))



    ###########
    # filter_by()
    ##########
    #查询id为1的users的信息
    # user = db.session.query(Users).filter_by(id=1).first()
    # print(user)

    ##########
    # 查询 users 表中的前2条数据
    #########
    # users = db.session.query(Users).limit(2).all()

    # 获取users表中过滤前3条数据后剩余的前2条数据
    # users = db.session.query(Users).limit(2).offset(3).all()


    ###########
    # 先按照年龄降序排序,再按照id升序排序
    ##########
    # users = db.session.query(Users).order_by("age desc,id asc").all()

    ##########
    # 分组查询 - group_by
    #########
    # users = db.session.query(Users.age).group_by('age').all()
    #
    # print(users)

    #########
    # 聚合函数-avg()
    #########
    # result=db.session.query(func.avg(Users.age).label('avgAge')).first()

    # 按年龄进行分组,求组内的年龄的平均值
    # result=db.session.query(Users.age,func.avg(Users.age),func.sum(Users.age)).group_by('age').all()
    # print(result)

    ###########
    # 基于Models进行的查询
    ##########
    # users = Users.query.all()
    # users = Users.query.filter(Users.id > 1).all()
    # print()
    # users = Users.query.filter_by(id=2).all()
    # for u in users:
    #     print("ID:%d,姓名:%s,年龄:%d,邮箱:%s" % (u.id,u.username,u.age,u.email))
=========================================================================================
python 安装包的方法

Python模块安装方法

一、方法1： 单文件模块 
直接把文件拷贝到 $python_dir/Lib

二、方法2： 多文件模块，带setup.py

下载模块包，进行解压，进入模块文件夹，执行： 
python setup.py install

三、 方法3：easy_install 方式

先下载ez_setup.py,运行python ez_setup 进行easy_install工具的安装，之后就可以使用easy_install进行安装package了。 
easy_install packageName 
easy_install package.egg

四、 方法4：pip 方式

先进行pip工具的安裝：easy_install pip（pip 可以通过easy_install 安裝，而且也会装到 Scripts 文件夹下。）

安裝：pip install PackageName

更新：pip install -U PackageName

移除：pip uninstall PackageName

搜索：pip search PackageName

帮助：pip help

注：虽然Python的模块可以拷贝安装，但是一般情况下推荐制作一个安装包，即写一个setup.py文件来安装。 
setup.py文件的使用如下: 
% python setup.py build #编译 
% python setup.py install #安装 
% python setup.py sdist #制作分发包 
% python setup.py bdist_wininst #制作windows下的分发包 
% python setup.py bdist_rpm

setup.py文件的编写 
setup.py中主要执行一个 setup函数，该函数中大部分是描述性东西，最主要的是packages参数，列出所有的package，可以用自带的find_packages来动态获取package。所以setup.py文件的编写实际是很简单的。 
简单的例子: 
setup.py文件：

from setuptools import setup, find_packages 
setup( 
name = ” mytest ” , 
version = ” 0.10 ” , 
description = ” My test module ” , 
author = ” Robin Hood ” , 
url = ” http://www.csdn.net ” , 
license = ” LGPL ” , 
packages = find_packages(), 
scripts = [ ” scripts/test.py ” ], 
)

mytest.py

import sys 
def get(): 
return sys.path

scripts/test.py

import os 
print os.environ.keys()

setup中的scripts表示将该文件放到 Python的Scripts目录下，可以直接用。OK，简单的安装成功，可以运行所列举的命令生成安装包，或者安装该python包。本机测试成功(win32-python25)！

附注：setuptools工具安装方法

（方法一）. 使用ez_setup.py安装setuptools 
　　进入https://pypi.python.org/pypi/setuptools下载ez_setup.py 
这是 setuptools 自豪的一种安装方式，只需要一个大约 8K 作为的脚本ez_setup.py，就能自动为用户安装包括 setuptools 自身在内的许多 Python 包。 使用这种方式，用户只需要下载 ez_setup。py 并运行，就可以自动下载和安装适合用户当前 Python 版本的适当的 setuptools egg 文件(当然，用户需要 Python 2.3.5 以上的版本，64 位操作系统的用户则需要 Python 2.4 以上的版本)。此外，这段脚本还会将可执行的 easy_install 脚本安装到用户所有的操作系统 Python 可执行脚本正常应该安装的位置(例如，Windows 用户会安装到 Python 安装目录下的 Scripts 目录中)。关于这种安装方法的更详细说明和注意事项，请参考其官方说明（见扩展阅读）。简单的安装命令如下： 　　wget -q ez_setup。py下载地址（见扩展阅读） 安装完后，最好确保 
（方法二）. 使用完整的安装包安装setuptools 
　　当然，用户也可以直接使用 setuptools发布版本来安装。对于使用 Windows 的用户，这也是挺方便的方法，许多 Linux 发行版的官方包管理仓库都包含 setuptools 的某个版本。例如，如果你跟我一样使用 Ubuntu ，那安装 setuptools 只是简单的进行如下操作：

apt-get install python-setuptools
安装 easy_install package-name，比如 easy_install pylab 
模块卸载 easy_install -m package-name， 比如easy_install -m pylab 
easy_install -m 包名，可以卸载软件包，但是卸载后还要手动删除遗留文件。 
setuptools它可以自动的安装模块，只需要你提供给它一个模块名字就可以，并且自动帮你解决模块的依赖问题。一般情况下用setuptools给安装的模块会自动放到一个后缀是.egg的目录里。

在Windows里，easy_install这个命令在python安装目录下的scripts里面，所以需要把scripts加到环境变量的PATH里，这样用起来就更方便，linux下不需要注意这个问题。
=======================================================================================================
创建表 ,csv 文件到数据库
CREATE TABLE china(
    Id int NULL,
    Name varchar(40) NULL,
    ParentId int NULL,
    ShortName varchar(40) NULL,
    LevelType int NULL,
    CityCode varchar(20) NULL,
    ZipCode varchar(20) NULL,
    MergerName varchar(100) NULL,
    Lng float NULL,
    Lat float NULL,
    Pinyin varchar(100) NULL)



load data infile 'D:\china.csv'
into table china
fields terminated by ',' optionally enclosed by '"' escaped by '"'
lines terminated by '\r\n'
IGNORE 1 LINES
(ID,Name,parentId,ShortName,LevelType,CityCode,ZipCode,MergerName,Lng,Lat,Pinyin);
The MySQL server is running with the --secure-file-priv option so it cannot exec
ute this statement
mysq


load data infile 'D:\yuancheng\\china.csv'
into table china
fields terminated by ',' optionally enclosed by '"' escaped by '"'
lines terminated by '\r\n'
IGNORE 1 LINES
(ID,Name,parentId,ShortName,LevelType,CityCode,ZipCode,MergerName,Lng,Lat,Pinyin);